{
  "name": "TaskBountyContract",
  "structs": {
    "DisputeData": [
      {
        "name": "freelancer_votes",
        "type": "uint64"
      },
      {
        "name": "company_votes",
        "type": "uint64"
      },
      {
        "name": "is_open",
        "type": "bool"
      },
      {
        "name": "voters",
        "type": "address[]"
      },
      {
        "name": "reward",
        "type": "uint64"
      },
      {
        "name": "client_amount_transferred",
        "type": "bool"
      },
      {
        "name": "freelancer_amount_transferred",
        "type": "bool"
      }
    ],
    "TaskData": [
      {
        "name": "company",
        "type": "address"
      },
      {
        "name": "freelancer",
        "type": "address"
      },
      {
        "name": "reward",
        "type": "uint64"
      }
    ]
  },
  "methods": [
    {
      "name": "create_task",
      "args": [
        {
          "type": "pay",
          "name": "payment_txn"
        },
        {
          "type": "uint64",
          "name": "task_id"
        },
        {
          "type": "address",
          "name": "company"
        },
        {
          "type": "address",
          "name": "freelancer"
        },
        {
          "type": "uint64",
          "name": "reward"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "events": [],
      "recommendations": {}
    },
    {
      "name": "release_reward",
      "args": [
        {
          "type": "uint64",
          "name": "task_id"
        },
        {
          "type": "address",
          "name": "caller"
        }
      ],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "events": [],
      "recommendations": {}
    },
    {
      "name": "start_appeal",
      "args": [
        {
          "type": "uint64",
          "name": "task_id"
        },
        {
          "type": "address",
          "name": "caller"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "events": [],
      "recommendations": {}
    },
    {
      "name": "cast_vote",
      "args": [
        {
          "type": "uint64",
          "name": "task_id"
        },
        {
          "type": "bool",
          "name": "vote_for_freelancer"
        },
        {
          "type": "address",
          "name": "caller"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "events": [],
      "recommendations": {}
    },
    {
      "name": "resolve_dispute",
      "args": [
        {
          "type": "uint64",
          "name": "task_id"
        },
        {
          "type": "address",
          "name": "caller"
        }
      ],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "events": [],
      "recommendations": {}
    },
    {
      "name": "claim_voting_reward",
      "args": [
        {
          "type": "uint64",
          "name": "task_id"
        },
        {
          "type": "address",
          "name": "caller"
        }
      ],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      },
      "readonly": false,
      "events": [],
      "recommendations": {}
    }
  ],
  "arcs": [
    22,
    28
  ],
  "networks": {},
  "state": {
    "schema": {
      "global": {
        "ints": 0,
        "bytes": 0
      },
      "local": {
        "ints": 0,
        "bytes": 0
      }
    },
    "keys": {
      "global": {},
      "local": {},
      "box": {}
    },
    "maps": {
      "global": {},
      "local": {},
      "box": {
        "box_map_struct": {
          "keyType": "uint64",
          "valueType": "TaskData",
          "prefix": "dXNlcnM="
        },
        "dispute_box": {
          "keyType": "uint64",
          "valueType": "DisputeData",
          "prefix": "ZGlzcHV0ZXM="
        }
      }
    }
  },
  "bareActions": {
    "create": [
      "NoOp"
    ],
    "call": []
  },
  "sourceInfo": {
    "approval": {
      "sourceInfo": [
        {
          "pc": [
            513
          ],
          "errorMessage": "Already voted"
        },
        {
          "pc": [
            302,
            314,
            354,
            365,
            388,
            500,
            585,
            773,
            883,
            922,
            936,
            996,
            1097
          ],
          "errorMessage": "Index access is out of bounds"
        },
        {
          "pc": [
            98,
            121,
            144,
            165,
            183,
            206
          ],
          "errorMessage": "OnCompletion is not NoOp"
        },
        {
          "pc": [
            308
          ],
          "errorMessage": "Only company can release"
        },
        {
          "pc": [
            1144
          ],
          "errorMessage": "Voter Not Found"
        },
        {
          "pc": [
            245
          ],
          "errorMessage": "can only call when creating"
        },
        {
          "pc": [
            101,
            124,
            147,
            168,
            186,
            209
          ],
          "errorMessage": "can only call when not creating"
        },
        {
          "pc": [
            300,
            353,
            691
          ],
          "errorMessage": "check self.box_map_struct entry exists"
        },
        {
          "pc": [
            451,
            702,
            1056
          ],
          "errorMessage": "check self.dispute_box entry exists"
        },
        {
          "pc": [
            219
          ],
          "errorMessage": "transaction type is pay"
        }
      ],
      "pcOffsetMethod": "none"
    },
    "clear": {
      "sourceInfo": [],
      "pcOffsetMethod": "none"
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
  },
  "byteCode": {
    "approval": "CiAGAAEg2QHYAYABJgUBAAV1c2VycwhkaXNwdXRlcwQVH3x1AgAAMRtBAMGCBgQKVPLDBNLEsmMEIZ1OfwTOuS9RBANVJ8wE6C+ELjYaAI4GAG4AVwBFADAAGQACIkMxGRREMRhENhoBNhoCiAOhFitMULAjQzEZFEQxGEQ2GgE2GgKIAh4WK0xQsCNDMRkURDEYRDYaATYaAjYaA4gBECNDMRkURDEYRDYaATYaAogAoyNDMRkURDEYRDYaATYaAogAXxYrTFCwI0MxGRREMRhEMRYjCUk4ECMSRDYaATYaAjYaAzYaBIgADSNDMRlA/2sxGBREI0OKBQCL+zgHMgoSRIv7OAiL/xcPRIv7OACL/RJEi/2L/lCL/1Api/xQTL+JigIBKYv+UEm+RElXACCL/xJEsTIKSwFXICBPAoFAW7IIsgeyACOyECKyAbO0CEy8SImKAgApi/5QvkxJTwJEVwAgi/8SQAALiwBXICCL/xJBADYjRCqL/lBJvUUBFESLAFdACIATAAAAAAAAAAAAAAAAAAAAAIAAHExQKFAlIlQnBFBLAbxIv4kiQv/HigMAIkmAAEcDKov9UEm+TElPAkRJIQVTKCJPAlQoE0QiTEmBEVlLARVSSSJZIosLiwoMiwiMA0EAFIsJVwIAiwskCyRYi/8SQQCgI4wDiwMURIv+KBNBAIKLB0kiWyMIFlwAjAcijAiLB0mBEVlJTgKMBUkVTE4CUkmMASJZjAIijASLBIsCDIsIjANBABSLAVcCAIsEJAskWIv/EkEAMiOMA4sDiweMAEAAHIsBVwIAi/9QSRUkChZXBgJMUIsHIosFWExQjACLAIsGSbxITL+JiwQjCIwEQv+oiwdJgQhbIwgWXAiMB0L/eosLIwiMC0L/OooCASJJgABHAymL/lBJvkQqi/5QSb5MSU8CREkhBVMoIk8CVCgTREmBEVlLARVSIllBASuLCYETW4EKChaLCUmBE1tPAhcJFowBSSJbSU4CjAOBCFtJjAQNQQBmsTIKiwdXICCLAReyCLIHsgAjshAisgGztAiMAosJIQQjVCUjVIwJiwlJJVMoIk8CVCgTTIwAQQAfiwlJIQRTKCJPAlQoE0yMAEEADIsGvEiLCSEFIlSMAIsAiwhJvEhMv4sCjACJiwOLBAxBACqxMgqLB1cAIIsBF7IIsgeyACOyECKyAbO0CIwCiwkhBCNUJSNUjAlC/4+LB1cAIIv/EkmMBUAAC4sHVyAgi/8SQQBOI0SLBUEAKosJIQQjVIwJiwEXgQIKFrEyCkwXsgiL/7IHsgAjshAisgGztAiMAkL/RYsHVyAgi/8SiwmMAEEAB4sJJSNUjACLAIwJQv/BIkL/r4AIAAAAAAAAAABC/tGKAgEigAAqi/5QSb5MSU8CREmBEVlJTwJJFUxOAlJJJwRMIkwiWSKLCYsIDEEAN4sFVwIAiwkkCyRYSYwAi/8TQQAdiwZXAgCLAFBJFSQKFlcGAkxQjAaLCSMIjAlC/8cjjAdC//GLB0SLAyKLBFiLBklOAlBJjAOBE1uBCgoWF4sIChaxMgpMF7IIi/+yB7IAI7IQIrIBs7QIjAEiWUAACYsCvEiLAYwAiYsCSbxIiwO/Qv/w",
    "clear": "CoEBQw=="
  },
  "compilerInfo": {
    "compiler": "puya",
    "compilerVersion": {
      "major": 4,
      "minor": 9,
      "patch": 0
    }
  },
  "events": [],
  "templateVariables": {}
}
